/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#pragma once

#include <ReactCommon/TurboModule.h>
#include <react/bridging/Bridging.h>

namespace facebook::react {


  class JSI_EXPORT NativeRNCConfigCxxSpecJSI : public TurboModule {
protected:
  NativeRNCConfigCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual jsi::Object getAll(jsi::Runtime &rt) = 0;
  virtual jsi::String get(jsi::Runtime &rt, jsi::String key) = 0;
  virtual jsi::String compositionInfo(jsi::Runtime &rt) = 0;

};

template <typename T>
class JSI_EXPORT NativeRNCConfigCxxSpec : public TurboModule {
public:
  jsi::Value get(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.get(rt, propName);
  }

  static constexpr std::string_view kModuleName = "RNCConfigModule";

protected:
  NativeRNCConfigCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule(std::string{NativeRNCConfigCxxSpec::kModuleName}, jsInvoker),
      delegate_(reinterpret_cast<T*>(this), jsInvoker) {}

private:
  class Delegate : public NativeRNCConfigCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativeRNCConfigCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {}

    jsi::Object getAll(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getAll) == 1,
          "Expected getAll(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Object>(
          rt, &T::getAll, jsInvoker_, instance_);
    }
    jsi::String get(jsi::Runtime &rt, jsi::String key) override {
      static_assert(
          bridging::getParameterCount(&T::get) == 2,
          "Expected get(...) to have 2 parameters");

      return bridging::callFromJs<jsi::String>(
          rt, &T::get, jsInvoker_, instance_, std::move(key));
    }
    jsi::String compositionInfo(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::compositionInfo) == 1,
          "Expected compositionInfo(...) to have 1 parameters");

      return bridging::callFromJs<jsi::String>(
          rt, &T::compositionInfo, jsInvoker_, instance_);
    }

  private:
    T *instance_;
  };

  Delegate delegate_;
};

} // namespace facebook::react
